#version 400 core

in vec2 pass_textureCoordinate;	//Input colour of vertex from vertex shader
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_pix_Color; //Output colour of individual pixel

uniform sampler2D textureSampler;	//Represents texture
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;

void main(void) {

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLight = normalize(toLightVector);
	
	float nDotl = dot(unitNormal, unitLight);
	float brightness = max(nDotl, 0.2);	//Minimum is 0.2, this is the ambient light
	vec3 diffuse = brightness * lightColour;
	
	vec3 unitToCamera = normalize(toCameraVector);
	vec3 unitLightToPoint = -unitLight;
	vec3 unitReflectedLightDirection = reflect(unitLightToPoint, unitNormal);	//reflects about the normal, giving direction of reflected light
	
	float specularFactor = dot(unitToCamera, unitReflectedLightDirection);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;
	
	out_pix_Color = vec4(finalSpecular, 1.0) + vec4(diffuse, 1.0) * texture(textureSampler, pass_textureCoordinate);	//Gets colour of pixel of texture textureSampler at coordinate pass_textureCoordinate
}