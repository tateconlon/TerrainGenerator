#version 400 core

in vec3 position;
in vec2 textureCoordinate;
in vec3 normal;

out vec2 pass_textureCoordinate;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;

void main(void) {

	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	//First tell position on screen.  Multiply position by TRS matrix
	gl_Position = projectionMatrix * viewMatrix * worldPosition;
	pass_textureCoordinate = textureCoordinate;
	
	surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;
	toLightVector = lightPosition - worldPosition.xyz;
	//viewMatrix is the "negative" of camera's position, to get the camera's position, take inverse
	toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;

}